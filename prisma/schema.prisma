datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

enum SearchStatus {
  Pending
  Active
  Success
  Error
}

model Search {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created DateTime @default(now())
  updated DateTime @default(now())
  status SearchStatus
  hitCount String?
  refreshes Refresh[]
  parameters SearchParameter[]
  results SearchResult[]
  @@map("searches")
}

enum SearchParameterName {
  FromDate
  OnlyActive
  OrganisationNumber
  SelectedCounty
  ShowToolbar
  ToDate
  id
  page
  sortDirection
  sortOrder
}

model SearchParameter {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created DateTime @default(now())
  updated DateTime @default(now())
  searchId String @db.Uuid
  name SearchParameterName
  value String
  search Search @relation(fields: [searchId], references: [id])
  @@map("search_parameters")
}

model SearchResult {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created DateTime @default(now())
  updated DateTime @default(now())
  searchId String @db.Uuid
  caseName String
  companyName String
  companyCode String
  documentCode String
  documentDate String
  documentType String
  notifications Notification[]
  search Search @relation(fields: [searchId], references: [id])
  @@map("search_results")
}

enum NotificationEmailStatus {
  Pending
  Success
  Aborted
}

// POST /api/notifications
// POST /api/notifications/{id}/email

model Notification {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created DateTime @default(now())
  updated DateTime @default(now())
  subscriptionId String @db.Uuid
  refreshId String @db.Uuid
  userId String @db.Uuid
  searchResultId String @db.Uuid
  emailStatus NotificationEmailStatus
  refresh Refresh @relation(fields: [refreshId], references: [id])
  searchResult SearchResult @relation(fields: [searchResultId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  user User @relation(fields: [userId], references: [id])
  @@map("notifications")
}

model Refresh {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created DateTime @default(now())
  updated DateTime @default(now())
  subscriptionId String @db.Uuid
  searchId String @db.Uuid
  notifications Notification[]
  search Search @relation(fields: [searchId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  @@map("refreshes")
}

enum RoleName {
  Developer
}

enum RoleStatus {
  Active
  Revoked
}

model Role {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created DateTime  @default(now())
  updated DateTime  @default(now())
  userId String @db.Uuid
  name RoleName
  status RoleStatus
  user User @relation(fields: [userId], references: [id])
  @@map("roles")
}

enum SessionStatus {
  Active
  Revoked
}

model Session {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created DateTime @default(now())
  updated DateTime @default(now())
  userId String @db.Uuid
  secret String
  status SessionStatus
  user User @relation(fields: [userId], references: [id])
  @@map("sessions")
}

model Subscription {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created DateTime @default(now())
  updated DateTime @default(now())
  userId String @db.Uuid
  companyCode String
  notifications Notification[]
  refreshes Refresh[]
  user User @relation(fields: [userId], references: [id])
  @@map("subscriptions")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created DateTime @default(now())
  updated DateTime @default(now())
  name String
  email String @unique
  password String
  notifications Notification[]
  roles Role[]
  sessions Session[]
  subscriptions Subscription[]
  @@map("users")
}
