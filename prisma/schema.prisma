datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Case {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company         Company        @relation(fields: [companyId], references: [id])
  companyId       String         @db.Uuid
  code            String         @unique
  name            String
  created         DateTime       @default(now())
  updated         DateTime       @default(now())
  documents       Document[]
  @@map("case")
}

model Chunk {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  scan      Scan      @relation(fields: [scanId], references: [id])
  scanId    String    @db.Uuid
  startDate DateTime? @db.Date
  stubCount Int?
  hitCount  String?
  created   DateTime  @default(now())
  updated   DateTime  @default(now())
  ingested  DateTime?
  stubs     Stub[]
  @@map("chunk")
  @@index([scanId, created(sort: Asc), ingested(sort: Asc)])
}

model Company {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code          String         @unique
  name          String
  slug          String         @unique
  created       DateTime       @default(now())
  updated       DateTime       @default(now())
  cases         Case[]
  documents     Document[]
  subscriptions Subscription[] @relation("CompanySubscription")

  @@map("company")
}

model County {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String   @unique
  name           String
  slug           String   @unique
  created        DateTime @default(now())
  updated        DateTime @default(now())
  documents      Document[]
  municipalities Municipality[]
  scans          Scan[]
  @@map("county")
}

model Document {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  case            Case           @relation(fields: [caseId], references: [id])
  caseId          String         @db.Uuid
  company         Company        @relation(fields: [companyId], references: [id])
  companyId       String         @db.Uuid
  county          County         @relation(fields: [countyId], references: [id])
  countyId        String         @db.Uuid
  municipality    Municipality   @relation(fields: [municipalityId], references: [id])
  municipalityId  String         @db.Uuid
  code            String         @unique
  type            String
  cfar            String
  workplace       String
  direction       String
  status          String
  filed           DateTime       @db.Date
  created         DateTime       @default(now())
  updated         DateTime       @default(now())
  @@map("document")
}

model Municipality {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  county    County   @relation(fields: [countyId], references: [id])
  countyId  String   @db.Uuid
  code      String   @unique
  name      String
  slug      String   @unique
  created   DateTime @default(now())
  updated   DateTime @default(now())
  documents Document[]
  @@map("municipality")
}

model Scan {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  county     County   @relation(fields: [countyId], references: [id])
  countyId   String   @db.Uuid
  chunkCount Int
  created    DateTime @default(now())
  updated    DateTime @default(now())
  completed  DateTime?
  chunks     Chunk[]
  @@map("scan")
  @@index([countyId, created(sort: Asc), completed(sort: Asc)])
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  secret    String
  created   DateTime @default(now())
  updated   DateTime @default(now())
  @@map("session")
}

model Stub {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chunk         Chunk    @relation(fields: [chunkId], references: [id])
  chunkId       String   @db.Uuid
  index         Int
  documentCode  String
  documentType  String
  caseName      String
  organization  String
  filed         DateTime @db.Date
  created       DateTime @default(now())
  updated       DateTime @default(now())
  ingested      DateTime?
  @@map("stub")
  @@index([created(sort: Asc), ingested(sort: Asc)])
}

enum SubscribableType {
  Company
}

model Subscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid

  company    Company?         @relation("CompanySubscription", fields: [targetId], references: [id], map: "company_subscribableId")
  targetType SubscribableType
  targetId   String @db.Uuid

  created   DateTime @default(now())
  updated   DateTime @default(now())
  @@map("subscription")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String         @unique
  password      String
  created       DateTime       @default(now())
  updated       DateTime       @default(now())
  sessions      Session[]
  subscriptions Subscription[]
  @@map("user")
}
