datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Case {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company         Company        @relation(fields: [companyId], references: [id])
  companyId       String         @db.Uuid
  code            String         @unique
  name            String
  created         DateTime       @default(now())
  updated         DateTime       @default(now())
  documents       Document[]
  @@map("case")
}

model Company {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String   @unique
  name      String
  slug      String   @unique
  created   DateTime @default(now())
  updated   DateTime @default(now())
  cases     Case[]
  documents Document[]
  @@map("company")
}

model County {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String   @unique
  name           String
  slug           String   @unique
  created        DateTime @default(now())
  updated        DateTime @default(now())
  documents      Document[]
  municipalities Municipality[]
  @@map("county")
}

model Document {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  case            Case           @relation(fields: [caseId], references: [id])
  caseId          String         @db.Uuid
  company         Company        @relation(fields: [companyId], references: [id])
  companyId       String         @db.Uuid
  county          County         @relation(fields: [countyId], references: [id])
  countyId        String         @db.Uuid
  municipality    Municipality   @relation(fields: [municipalityId], references: [id])
  municipalityId  String         @db.Uuid
  code            String         @unique
  type            String
  cfar            String
  workplace       String
  direction       String
  status          String
  filed           DateTime       @db.Date
  created         DateTime       @default(now())
  updated         DateTime       @default(now())
  @@map("document")
}

model Municipality {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  county    County   @relation(fields: [countyId], references: [id])
  countyId  String   @db.Uuid
  code      String   @unique
  name      String
  slug      String   @unique
  created   DateTime @default(now())
  updated   DateTime @default(now())
  documents Document[]
  @@map("municipality")
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  secret    String
  created   DateTime @default(now())
  updated   DateTime @default(now())
  @@map("session")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String   @unique
  password  String
  created   DateTime @default(now())
  updated   DateTime @default(now())
  sessions  Session[]
  @@map("user")
}
